#!/usr/bin/env ruby

$LOAD_PATH << File.dirname(__FILE__) + "/../lib" if $0 == __FILE__
require 'optparse'
require 'southy'

config = { :write => false }
operations = %w(init run start stop restart confirm reconfirm checkin status add remove delete list history test)

option_parser = OptionParser.new do |opts|
  opts.banner = "Southy #{Southy::VERSION}, auto check-in for Southwest flights\nUsage: #{__FILE__} [command] [options]"

  opts.on("-v", "--verbose", "Be verbose") do
    config[:verbose] = true
  end

  opts.on("-w", "--write", "Persist command") do
    config[:write] = true
  end

  opts.separator <<-EOS

Supported commands:

 init <personal_info>                Initialize Southy with your personal info
 list                                Display upcoming flight check-ins
 history                             Display past flight check-ins
 add <conf> [<personal_info>]        Add a new check-in
 remove <conf>                       Remove a check-in (synonym: delete)
 confirm                             Confirm all unconfirmed flights
 reconfirm                           Reconfirm all flights (picks up any ticketing changes)
 checkin                             Check-in for all available flights
 run                                 Run Southy in the foreground (kill with ctrl-c)
 start [-w]                          Start Southy so that it can check you in
 stop [-w]                           Stop Southy
 restart                             Stop and start Southy
 status                              Show Southy's status (and PID if running)

<personal_info> is in the form of: <first_name> <last_name> <email>
where email is always optional.  Southy will email your boarding pass to you if it can.

-w will persist the start/stop command so the agent will load on startup or never load, respectively.
EOS
end
option_parser.parse!


op = ARGV.shift
if operations.include?(op)
  begin
    cli = Southy::CLI.new config
    cli.send(op.to_sym, ARGV)
  rescue ArgumentError => ex
    puts ex.message
  rescue Exception => e
    puts "Uh oh, I didn't expect this:"
    puts e.message
    puts e.backtrace.join("\n")
  end
else
  puts option_parser.help
end
